'use strict';

exports.__esModule = true;
exports.ie9FileReaderShim = undefined;

var ie9FileReaderShim = exports.ie9FileReaderShim = function () {
    var _ref = _asyncToGenerator(function* (req, res) {
        var body = yield (0, _http.fetchBody)(req);
        var parsedUrl = _url2.default.parse(req.url, true);
        var contentTypeHeader = req.headers['content-type'];
        var inputName = parsedUrl.query['input-name'];
        var filename = parsedUrl.query['filename'];
        var info = getFileInfo(contentTypeHeader, body, inputName, filename);

        // NOTE: We should skip a content type, because IE9 can't handle content with the "application/json" content type
        // trying to download it as a file.
        (0, _http.respondWithJSON)(res, info, true);
    });

    return function ie9FileReaderShim(_x, _x2) {
        return _ref.apply(this, arguments);
    };
}();

exports.inject = inject;

var _formData = require('./form-data');

var _formData2 = _interopRequireDefault(_formData);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _http = require('../utils/http');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Utils
function getFileInfo(contentTypeHeader, body, inputName, fileName) {
    var formData = new _formData2.default();

    formData.parseContentTypeHeader(contentTypeHeader);
    formData.parseBody(body);

    var entry = formData.getEntriesByName(inputName)[0];
    var data = Buffer.concat(entry.body);

    fileName = fileName.substr(fileName.lastIndexOf('\\') + 1);

    return {
        data: data.toString('base64'),
        info: {
            type: entry.headers['Content-Type'],
            name: fileName,
            size: data.length
        }
    };
}

// API
function inject(contentTypeHeader, body) {
    var formData = new _formData2.default();

    formData.parseContentTypeHeader(contentTypeHeader);

    if (!formData.boundary) return null;

    formData.parseBody(body);
    formData.expandUploads();

    return formData.toBuffer();
}